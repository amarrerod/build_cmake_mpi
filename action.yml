name: "Build CMake & MPI projects"
description: "Builds CMake and MPI based projects using C++20 features" 

inputs:  
  variant: 
    description: "Build variant to use in CMake. Default: Debug"
    required: false
  
  examples:
    description: "Includes the examples of usage. Default: False"
    required: false
  
  tests:
    description: "Includes and run all the tests. Default: True"
    required: false
  
  coverage:
    description: "Includes coverage reporting. Default: False"
    required: false

  numcpp:
    description: "Includes NumCpp with Boost. Default: True"
    required: false

runs:
  using: "composite"
  steps:
      - name: Set the variant
        shell: bash
        run: |
          if [ -z "${{inputs.variant}}" ]
          then
            echo "variant=Debug" >> $GITHUB_ENV
          else
            echo "variant=${{inputs.variant}}" >> $GITHUB_ENV
          fi
      
      - name: Set the examples
        shell: bash
        run: |
          if [ -z "${{inputs.examples}}" ]
          then
            echo "examples=False" >> $GITHUB_ENV
          else
            echo "examples=${{inputs.examples}}" >> $GITHUB_ENV
          fi
      
      - name: Set the tests
        shell: bash
        run: |
          if [ -z "${{inputs.tests}}" ]
          then
            echo "tests=True" >> $GITHUB_ENV
          else
            echo "tests=${{inputs.tests}}" >> $GITHUB_ENV
          fi
      
      - name: Set the coverage
        shell: bash
        run: |
          if [ -z "${{inputs.coverage}}" ]
          then
            echo "coverage=False" >> $GITHUB_ENV
          else
            echo "coverage=${{inputs.coverage}}" >> $GITHUB_ENV
          fi

      - name: Set NumCpp with boost
        shell: bash
        run: |
          if [ -z "${{inputs.numcpp}}" ]
          then
            echo "numcpp=True" >> $GITHUB_ENV
          else
            echo "numcpp=${{inputs.numcpp}}" >> $GITHUB_ENV
          fi
      

      - name: "Setups actions"
        uses: actions/checkout@v2
      - name: "Setups GCC 10"
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
      - name: Install OpenMPI
        shell: bash
        run: sudo apt install -y openmpi-bin libopenmpi-dev
      - name: Export C Compiler
        shell: bash
        run:  export CC=MPI_C
      - name: Export CXX Compiler
        shell: bash
        run:  export CXX=MPI_CXX
      - name: Configures project
        shell: bash
        run:  cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.variant}} -DINCLUDE_EXAMPLES=${{env.examples}} -DINCLUDE_TESTS=${{env.tests}} -DINCLUDE_COVERAGE=${{env.coverage}} -DNUMCPP_NO_USE_BOOST=${{env.numcpp}}
      - name: Build
        shell: bash
        run:  cmake --build ${{github.workspace}}/build --config ${{env.variant}}  --target all -- -j 14
